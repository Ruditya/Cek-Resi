{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tugas Kuliah\\\\Semester 4\\\\iNTERO\\\\API-Request\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport Axios from \"axios\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nconst App = () => {\n  const [state, setState] = useState({});\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [cityName, setCityName] = useState(\"\");\n  React.useEffect(() => {// fetchData();\n  }, []);\n\n  const fetchData = () => {\n    setError(\"\");\n    const apiKey = \"3500b52091a4b44d88536f2eb08f5304\";\n    setLoading(true);\n    Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric`).then(res => {\n      setState(res.data);\n      setLoading(false);\n    }).catch(err => {\n      setError(\"Unable to get weather information\");\n      console.log(err);\n      setLoading(false);\n    }); // Axios.post(\"url\", data, {headers: {\n    //     \"Content-Type\": \"multipart/form-data\",\n    //     \"Content-Type\": \"application/json\",\n    //   }})\n  };\n\n  const displayInformation = () => {\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        className: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 14\n        }\n      }, error);\n    }\n\n    if (_.isEmpty(state) && loading) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 14\n        }\n      }, \"Loading weather information\");\n    }\n\n    if (_.isEmpty(state)) {\n      return false;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, \"The temperature is currently \", state.main.temp, \"\\u2103 but feels more like \", state.main.feels_like, \"\\u2103\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, \"Currently the weather would best be described as \", state.weather[0].description), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, \"With highs of \", state.main.temp_max, \"\\u2103\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, \"And lows of \", state.main.temp_min, \"\\u2103\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"The sun will set at \", moment.unix(state.sys.sunrise).format(\"h:mm:ss a\")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, \"And will rise at \", moment.unix(state.sys.sunset).format(\"h:mm:ss a\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"divider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cont\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"Weather API\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, displayInformation()), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Enter city name\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => setCityName(event.target.value),\n    className: \"input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: fetchData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Get Weather\"));\n};\n\nexport default App;","map":{"version":3,"sources":["D:/Tugas Kuliah/Semester 4/iNTERO/API-Request/src/App.js"],"names":["React","useState","Axios","_","moment","App","state","setState","error","setError","loading","setLoading","cityName","setCityName","useEffect","fetchData","apiKey","get","then","res","data","catch","err","console","log","displayInformation","isEmpty","main","temp","feels_like","weather","description","temp_max","temp_min","unix","sys","sunrise","format","sunset","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nconst App = () => {\r\n  const [state , setState] = useState({});\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [cityName, setCityName] = useState(\"\");\r\n\r\n  React.useEffect(() => {\r\n    // fetchData();\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    setError(\"\");\r\n    const apiKey = \"3500b52091a4b44d88536f2eb08f5304\";\r\n    setLoading(true);\r\n    Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric`)\r\n      .then(res => {\r\n        setState(res.data);\r\n        setLoading(false);\r\n      }).catch(err => {\r\n        setError(\"Unable to get weather information\");\r\n        console.log(err)\r\n        setLoading(false);\r\n      });\r\n\r\n    // Axios.post(\"url\", data, {headers: {\r\n    //     \"Content-Type\": \"multipart/form-data\",\r\n    //     \"Content-Type\": \"application/json\",\r\n    //   }})\r\n  };\r\n\r\n  const displayInformation = () => {\r\n    if (error) {\r\n      return <p className={\"danger\"}>{error}</p>\r\n    }\r\n\r\n    if (_.isEmpty(state) && loading) {\r\n      return <p>Loading weather information</p>\r\n    }\r\n\r\n    if (_.isEmpty(state)) {\r\n      return false\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <p>The temperature is currently {state.main.temp}&#8451; but feels more like {state.main.feels_like}&#8451;</p>\r\n        <p>Currently the weather would best be described as {state.weather[0].description}</p>\r\n        <p>With highs of {state.main.temp_max}&#8451;</p>\r\n        <p>And lows of {state.main.temp_min}&#8451;</p>\r\n        <p>The sun will set at {moment.unix(state.sys.sunrise).format(\"h:mm:ss a\")}</p>\r\n        <p>And will rise at {moment.unix(state.sys.sunset).format(\"h:mm:ss a\")}</p>\r\n\r\n        <div className={\"divider\"}/>\r\n      </>\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div className=\"cont\">\r\n      <h1 className={\"title\"}>Weather API</h1>\r\n\r\n      <div>\r\n        {displayInformation()}\r\n      </div>\r\n\r\n      <p>Enter city name</p>\r\n      <input onChange={event => setCityName(event.target.value)} className={\"input\"}/>\r\n      <button className={\"button\"} onClick={fetchData}>Get Weather</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}